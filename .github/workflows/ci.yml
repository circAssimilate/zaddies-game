name: Continuous Integration

on:
  pull_request:
    branches: [main]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Need full history for file diff

      - name: Detect Changed Files
        id: changes
        run: |
          # Get changed files
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}...HEAD)
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check if only documentation changed
          DOCS_ONLY=true
          while IFS= read -r file; do
            if [[ ! "$file" =~ \.(md)$ ]] && [[ ! "$file" =~ ^docs/ ]] && [[ ! "$file" =~ ^\.github/ISSUE_TEMPLATE/ ]] && [[ ! "$file" =~ ^\.github/PULL_REQUEST_TEMPLATE/ ]]; then
              DOCS_ONLY=false
              break
            fi
          done <<< "$CHANGED_FILES"

          echo "docs_only=$DOCS_ONLY" >> $GITHUB_OUTPUT

          if [ "$DOCS_ONLY" == "true" ]; then
            echo "::notice::📝 Documentation-only changes detected - will skip tests and builds"
          else
            echo "::notice::💻 Code changes detected - will run full pipeline"
          fi

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          START_TIME=$(date +%s)
          pnpm install --frozen-lockfile
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))

          echo "### 📦 Dependency Installation Performance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| ⏱️ Duration | ${DURATION}s |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 Target (cached) | <20s |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 Target (changed) | <45s |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ $DURATION -gt 45 ]; then
            echo "⚠️ **WARNING**: Installation time exceeded 45s target" >> $GITHUB_STEP_SUMMARY
            echo "::warning::Dependency installation took ${DURATION}s, exceeding 45s target"
          elif [ $DURATION -gt 20 ]; then
            echo "ℹ️ **INFO**: Cache miss or lockfile change detected (${DURATION}s > 20s)" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **SUCCESS**: Installation met cached target (<20s)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Prettier Check
        run: pnpm run format:check

      - name: ESLint
        run: pnpm run lint

      - name: Run Backend Tests
        if: steps.changes.outputs.docs_only != 'true'
        run: cd backend && pnpm test || echo "No tests yet"

      - name: Run Frontend Tests
        if: steps.changes.outputs.docs_only != 'true'
        run: cd frontend && pnpm test || echo "No tests yet"

      - name: Build Frontend
        if: steps.changes.outputs.docs_only != 'true'
        run: cd frontend && pnpm run build

      - name: Build Backend
        if: steps.changes.outputs.docs_only != 'true'
        run: cd backend && pnpm run build

      - name: Workflow Decision Summary
        run: |
          echo "### 🔄 CI Workflow Decision" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.changes.outputs.docs_only }}" == "true" ]; then
            echo "**Decision**: Documentation-only changes detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ Linting: **Ran**" >> $GITHUB_STEP_SUMMARY
            echo "⏭️  Tests: **Skipped**" >> $GITHUB_STEP_SUMMARY
            echo "⏭️  Builds: **Skipped**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Reason**: Documentation changes don't require compilation or testing" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Decision**: Code changes detected - full pipeline executed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ Linting: **Ran**" >> $GITHUB_STEP_SUMMARY
            echo "✅ Tests: **Ran**" >> $GITHUB_STEP_SUMMARY
            echo "✅ Builds: **Ran**" >> $GITHUB_STEP_SUMMARY
          fi
