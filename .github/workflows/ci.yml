name: Continuous Integration

on:
  pull_request:
    branches: [main]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Need full history for file diff

      - name: Detect Changed Files
        id: changes
        run: |
          # Get changed files
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}...HEAD)
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Initialize flags
          DOCS_ONLY=true
          HAS_FRONTEND=false
          HAS_BACKEND=false
          HAS_SHARED=false
          HAS_TESTS_ONLY=true
          HAS_SOURCE_CODE=false

          # Categorize files
          while IFS= read -r file; do
            # Skip documentation files
            if [[ "$file" =~ \.(md)$ ]] || [[ "$file" =~ ^docs/ ]] || [[ "$file" =~ ^\.github/ISSUE_TEMPLATE/ ]] || [[ "$file" =~ ^\.github/PULL_REQUEST_TEMPLATE/ ]]; then
              continue
            fi

            DOCS_ONLY=false

            # Check for test files
            if [[ "$file" =~ \.test\.(ts|tsx|js|jsx)$ ]] || [[ "$file" =~ \.spec\.(ts|tsx|js|jsx)$ ]] || [[ "$file" =~ /tests/ ]] || [[ "$file" =~ /__tests__/ ]]; then
              # Test file detected, but don't mark as source code
              :
            else
              # Non-test code file
              HAS_TESTS_ONLY=false

              # Detect frontend/backend/shared source code
              if [[ "$file" =~ ^frontend/ ]] && [[ "$file" =~ \.(ts|tsx|js|jsx)$ ]]; then
                HAS_FRONTEND=true
                HAS_SOURCE_CODE=true
              elif [[ "$file" =~ ^backend/ ]] && [[ "$file" =~ \.(ts|tsx|js|jsx)$ ]]; then
                HAS_BACKEND=true
                HAS_SOURCE_CODE=true
              elif [[ "$file" =~ ^shared/ ]] && [[ "$file" =~ \.(ts|tsx|js|jsx)$ ]]; then
                HAS_SHARED=true
                HAS_SOURCE_CODE=true
              fi
            fi
          done <<< "$CHANGED_FILES"

          # Determine what to run
          FRONTEND_ONLY=false
          BACKEND_ONLY=false

          if [ "$HAS_SOURCE_CODE" == "true" ]; then
            if [ "$HAS_FRONTEND" == "true" ] && [ "$HAS_BACKEND" == "false" ] && [ "$HAS_SHARED" == "false" ]; then
              FRONTEND_ONLY=true
            elif [ "$HAS_BACKEND" == "true" ] && [ "$HAS_FRONTEND" == "false" ] && [ "$HAS_SHARED" == "false" ]; then
              BACKEND_ONLY=true
            fi
          fi

          # Set outputs
          echo "docs_only=$DOCS_ONLY" >> $GITHUB_OUTPUT
          echo "frontend_only=$FRONTEND_ONLY" >> $GITHUB_OUTPUT
          echo "backend_only=$BACKEND_ONLY" >> $GITHUB_OUTPUT
          echo "test_only=$HAS_TESTS_ONLY" >> $GITHUB_OUTPUT
          echo "has_shared=$HAS_SHARED" >> $GITHUB_OUTPUT

          # Log decision
          if [ "$DOCS_ONLY" == "true" ]; then
            echo "::notice::📝 Documentation-only changes - will skip tests and builds"
          elif [ "$HAS_TESTS_ONLY" == "true" ]; then
            echo "::notice::🧪 Test-only changes - will run tests but skip builds"
          elif [ "$FRONTEND_ONLY" == "true" ]; then
            echo "::notice::⚛️  Frontend-only changes - will skip backend tests and build"
          elif [ "$BACKEND_ONLY" == "true" ]; then
            echo "::notice::🔧 Backend-only changes - will skip frontend tests and build"
          elif [ "$HAS_SHARED" == "true" ]; then
            echo "::notice::🔗 Shared code changes - will run full pipeline"
          else
            echo "::notice::💻 Code changes detected - will run full pipeline"
          fi

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          START_TIME=$(date +%s)
          pnpm install --frozen-lockfile
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))

          echo "### 📦 Dependency Installation Performance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| ⏱️ Duration | ${DURATION}s |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 Target (cached) | <20s |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 Target (changed) | <45s |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ $DURATION -gt 45 ]; then
            echo "⚠️ **WARNING**: Installation time exceeded 45s target" >> $GITHUB_STEP_SUMMARY
            echo "::warning::Dependency installation took ${DURATION}s, exceeding 45s target"
          elif [ $DURATION -gt 20 ]; then
            echo "ℹ️ **INFO**: Cache miss or lockfile change detected (${DURATION}s > 20s)" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **SUCCESS**: Installation met cached target (<20s)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Prettier Check
        run: pnpm run format:check

      - name: ESLint
        run: pnpm run lint

      - name: Run Backend Tests
        if: steps.changes.outputs.docs_only != 'true' && steps.changes.outputs.frontend_only != 'true' && steps.changes.outputs.test_only != 'true'
        run: cd backend && pnpm test || echo "No tests yet"

      - name: Run Frontend Tests
        if: steps.changes.outputs.docs_only != 'true' && steps.changes.outputs.backend_only != 'true' && steps.changes.outputs.test_only != 'true'
        run: cd frontend && pnpm test || echo "No tests yet"

      - name: Build Frontend
        if: steps.changes.outputs.docs_only != 'true' && steps.changes.outputs.backend_only != 'true' && steps.changes.outputs.test_only != 'true'
        run: cd frontend && pnpm run build

      - name: Build Backend
        if: steps.changes.outputs.docs_only != 'true' && steps.changes.outputs.frontend_only != 'true' && steps.changes.outputs.test_only != 'true'
        run: cd backend && pnpm run build

      - name: Workflow Decision Summary
        run: |
          echo "### 🔄 CI Workflow Decision" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.changes.outputs.docs_only }}" == "true" ]; then
            echo "**Decision**: Documentation-only changes detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ Linting: **Ran**" >> $GITHUB_STEP_SUMMARY
            echo "⏭️  Frontend Tests: **Skipped**" >> $GITHUB_STEP_SUMMARY
            echo "⏭️  Backend Tests: **Skipped**" >> $GITHUB_STEP_SUMMARY
            echo "⏭️  Frontend Build: **Skipped**" >> $GITHUB_STEP_SUMMARY
            echo "⏭️  Backend Build: **Skipped**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Reason**: Documentation changes don't require compilation or testing" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.changes.outputs.test_only }}" == "true" ]; then
            echo "**Decision**: Test-only changes detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ Linting: **Ran**" >> $GITHUB_STEP_SUMMARY
            echo "⏭️  Frontend Tests: **Skipped**" >> $GITHUB_STEP_SUMMARY
            echo "⏭️  Backend Tests: **Skipped**" >> $GITHUB_STEP_SUMMARY
            echo "⏭️  Frontend Build: **Skipped**" >> $GITHUB_STEP_SUMMARY
            echo "⏭️  Backend Build: **Skipped**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Reason**: Test file changes don't require builds (no deployment needed)" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.changes.outputs.frontend_only }}" == "true" ]; then
            echo "**Decision**: Frontend-only changes detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ Linting: **Ran**" >> $GITHUB_STEP_SUMMARY
            echo "✅ Frontend Tests: **Ran**" >> $GITHUB_STEP_SUMMARY
            echo "⏭️  Backend Tests: **Skipped**" >> $GITHUB_STEP_SUMMARY
            echo "✅ Frontend Build: **Ran**" >> $GITHUB_STEP_SUMMARY
            echo "⏭️  Backend Build: **Skipped**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Reason**: No backend code changes detected" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.changes.outputs.backend_only }}" == "true" ]; then
            echo "**Decision**: Backend-only changes detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ Linting: **Ran**" >> $GITHUB_STEP_SUMMARY
            echo "⏭️  Frontend Tests: **Skipped**" >> $GITHUB_STEP_SUMMARY
            echo "✅ Backend Tests: **Ran**" >> $GITHUB_STEP_SUMMARY
            echo "⏭️  Frontend Build: **Skipped**" >> $GITHUB_STEP_SUMMARY
            echo "✅ Backend Build: **Ran**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Reason**: No frontend code changes detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Decision**: Code changes detected - full pipeline executed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ Linting: **Ran**" >> $GITHUB_STEP_SUMMARY
            echo "✅ Frontend Tests: **Ran**" >> $GITHUB_STEP_SUMMARY
            echo "✅ Backend Tests: **Ran**" >> $GITHUB_STEP_SUMMARY
            echo "✅ Frontend Build: **Ran**" >> $GITHUB_STEP_SUMMARY
            echo "✅ Backend Build: **Ran**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            if [ "${{ steps.changes.outputs.has_shared }}" == "true" ]; then
              echo "**Reason**: Shared code changes affect both frontend and backend" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Reason**: Mixed code changes detected" >> $GITHUB_STEP_SUMMARY
            fi
          fi
